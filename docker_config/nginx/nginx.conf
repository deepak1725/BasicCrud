# upstream sample_project_server {
#   # fail_timeout=0 means we always retry an upstream even if it failed
#   # to return a good HTTP response (in case the Unicorn master nukes a
#   # single worker for timing out).
#   server unix:/home/ubuntu/django_env/run/gunicorn.sock fail_timeout=0;
# }
worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;



events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {

    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log /dev/stdout;
    error_log /tmp/nginx.error.log;
    sendfile on;
    gzip  on;

    upstream web {  
        ip_hash;
        server django:8000 fail_timeout=0;
    }

    server {
        # if no Host match, close the connection to prevent host spoofing
        listen 80 default_server;
        return 444;
    }

    server {
         # use 'listen 80 deferred;' for Linux
        listen 80;
        server_name djangular.com localhost 0.0.0.0;
        client_max_body_size 4G;
        keepalive_timeout 5;


        location /my_cdn/ {
            alias   /home/ubuntu/static/;
        }

        location /media/ {
            alias   /home/ubuntu/media/;
        }


        location / {
            proxy_pass http://web/;
            proxy_set_header   Host $http_host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }

        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /path/to/app/current/public;
        }
    }
}
daemon off;